{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"curre",
				"current_panel"
			],
			[
				"do",
				"do"
			],
			[
				"entry",
				"entry_door"
			],
			[
				"back",
				"backgrounds_panels"
			],
			[
				"scale",
				"SCALE"
			],
			[
				"background",
				"background_panels"
			],
			[
				"set",
				"setColor"
			],
			[
				"backgrou",
				"background_panel_1"
			],
			[
				"snd_",
				"snd_wind"
			],
			[
				"snd",
				"snd_wind"
			],
			[
				"end",
				"end"
			],
			[
				"new",
				"newX"
			],
			[
				"add",
				"addPeriodic"
			],
			[
				"this",
				"thisObject"
			],
			[
				"poin",
				"setPointSize"
			],
			[
				"scanline",
				"scanlines_overlay"
			],
			[
				"get",
				"getLinearVelocity"
			],
			[
				"z",
				"z"
			],
			[
				"traf",
				"traffic"
			],
			[
				"wi",
				"getWidth"
			],
			[
				"im",
				"img_bg"
			],
			[
				"jump",
				"jump_sine_dt"
			],
			[
				"draw",
				"drawHUD"
			],
			[
				"is",
				"isVisible"
			],
			[
				"srip",
				"scriptPosition"
			],
			[
				"text",
				"textReading"
			],
			[
				"script",
				"scriptPosition"
			],
			[
				"key",
				"keypressed"
			]
		]
	},
	"buffers":
	[
		{
			"file": "states/title.lua",
			"settings":
			{
				"buffer_size": 1862,
				"line_ending": "Unix"
			}
		},
		{
			"contents": "local level = {}\n\nlocal Timer = require \"lib.hump.timer\"\n\n--level vars\nlocal level_speed = 100\nlocal panels_left = 6\nlocal status = \"intro\" -- other states are play, dead and outro\n\n--background stuff\nlocal current_background panel = 1\n\n-- hot swap between panel 1, 2 and 3\nlocal background_panels = {\n	{ x = 0, image = nil, current = false, furthest = false},\n	{ x = 0, image = nil, current = false, furthest = false},\n	{ x = 0, image = nil, current = false, furthest = true}\n}\n\nlocal foreground_panels = {\n	{ x = 0, image = nil, current = false, furthest = false},\n	{ x = 0, image = nil, current = false, furthest = false},\n	{ x = 0, image = nil, current = false, furthest = true}\n}\n\n--doors and stuff\nlocal entry_door = {image = nil, x = nil, y = nil, alive = true}\n\n\nfunction level:enter(state)\n\n	love.graphics.setDefaultFilter('nearest')\n	--panel iterates at half screen\n\n	--load in panel data for foreground and background\n	background_imagedata_start = love.image.newImageData('assets/images/start.gif')\n	background_imagedata_1 = love.image.newImageData('assets/images/wall1sketch.png')\n	foreground_imagedata_1 = love.image.newImageData('assets/images/floor1sketch.png')\n	background_imagedata_end = love.image.newImageData('assets/images/end.gif')\n\n	--create as many image items as needed for background then foreground\n	background_panel_images = { \n		love.graphics.newImage(background_imagedata_1)\n	}\n\n	foreground_panel_images = {\n		love.graphics.newImage(foreground_imagedata_1)\n	}\n\n\n\n	--build initial background panels\n	for key,value in pairs(background_panels) do \n		value.x = background_imagedata_1:getWidth() * (key-1)\n\n   		if key == 1 then\n   			value.image = love.graphics.newImage(background_imagedata_1)\n   			value.current = true\n   		else \n   			value.image = background_panel_images[math.random(table.getn(background_panel_images))]\n   			value.current = false\n   		end\n	end\n\n	--build initial foreground panels\n	for key,value in pairs(foreground_panels) do \n		value.x = foreground_imagedata_1:getWidth() * (key-1)\n		value.image = foreground_panel_images[math.random(table.getn(foreground_panel_images))]\n   		\n   		if key == 1 then\n   			value.current = true\n   		else \n   			value.current = false\n   		end\n	end\n\n	--build entry door\n	entry_door.image = love.graphics.newImage('assets/images/door1.png')\n	entry_door.x = 56\n	entry_door.y = 34\n\n	-- set timer to go from intro to play\n	Timer.add(1, function() status = \"play\" end)\n\n\nend\n\nfunction level:leave()\n	\nend\n\nfunction level:update(dt)\n	--update all timers\n	Timer.update(dt)\n\n	if status == \"play\" then\n\n		--move door \n		if entry_door.alive then\n			entry_door.x = entry_door.x - level_speed * dt;\n			if entry_door.x <= -200 then\n				entry_door.alive = false\n				entry_door.image = nil\n			end\n		end\n\n		-- move background panels\n		for key, value in pairs(background_panels) do \n			-- move panels\n			value.x = value.x - level_speed * dt\n\n			if value.x <  background_imagedata_1:getWidth()*-1 then\n\n				-- set item values and assign a new random image\n				value.image = background_panel_images[math.random(table.getn(background_panel_images))]\n				value.x = background_imagedata_1:getWidth()*2\n				value.current = false\n\n				-- set current panel\n				if key+1 > table.getn(background_panels) then\n					background_panels[1].current = true\n				else \n					background_panels[key+1].current = false\n				end\n\n				--search furthest and replace it, set this x to new furthest location\n				for furthest_ket, furthest_value in pairs(background_panels) do \n					if furthest_value.furthest then \n						-- don't touch this. wizardy ahead. (can't touch this)\n						if key == 1 then\n							value.x = furthest_value.x + furthest_value.image:getWidth()	 - level_speed * dt\n						else\n							value.x = furthest_value.x + furthest_value.image:getWidth()\n						end\n						furthest_value.furthest = false\n						value.furthest = true\n						--done searching so break\n						break\n					end\n				end\n\n				current_background_panel = current_background_panel + 1\n			end\n		end\n\n		-- move foreground panels\n		for key, value in pairs(foreground_panels) do \n			-- move panels\n			value.x = value.x - level_speed * dt\n\n			if value.x <  foreground_imagedata_1:getWidth()*-1 then\n\n				-- set item values and assign a new random image\n				value.image = foreground_panel_images[math.random(table.getn(foreground_panel_images))]\n				value.x = background_imagedata_1:getWidth()*2\n				value.current = false\n\n				-- set current panel\n				if key+1 > table.getn(foreground_panels) then\n					foreground_panels[1].current = true\n				else \n					foreground_panels[key+1].current = false\n				end\n\n				--search furthest and replace it, set this x to new furthest location\n				for furthest_ket, furthest_value in pairs(foreground_panels) do \n					if furthest_value.furthest then \n						-- don't touch this. wizardy ahead. (can't touch this)\n						if key == 1 then\n							value.x = furthest_value.x + furthest_value.image:getWidth()	 - level_speed * dt\n						else\n							value.x = furthest_value.x + furthest_value.image:getWidth()\n						end\n						furthest_value.furthest = false\n						value.furthest = true\n						--done searching so break\n						break\n					end\n				end\n			end\n		end\n	end\nend\n\nfunction level:draw()\n	love.graphics.push()\n\n	love.graphics.scale( SCALE )\n\n	--draw background panels 1, 2 and 3\n	for key, value in pairs(background_panels) do \n		love.graphics.draw(value.image, value.x, 0)\n	end\n\n	--draw foreground panels 1, 2 and 3\n	for key, value in pairs(foreground_panels) do \n		love.graphics.draw(value.image, value.x, 0)\n	end\n\n	if entry_door.alive then\n		love.graphics.draw(entry_door.image, entry_door.x, entry_door.y)\n	end\n	\n	love.graphics.pop()\nend\n\nfunction level:keypressed(key, unicode)\n	-- navigate menu\n	if key == \"q\" then\n		love.event.push(\"quit\")\n	end\n\nend\n\nreturn level",
			"file": "states/level.lua",
			"file_size": 5787,
			"file_write_time": 1412346753000000,
			"settings":
			{
				"buffer_size": 5809,
				"line_ending": "Unix"
			}
		},
		{
			"file": "states/play.lua",
			"settings":
			{
				"buffer_size": 1641,
				"line_ending": "Unix"
			}
		},
		{
			"file": "conf.lua",
			"settings":
			{
				"buffer_size": 1785,
				"line_ending": "Unix"
			}
		}
	],
	"build_system": "Packages/User/Love.sublime-build",
	"command_palette":
	{
		"height": 0.0,
		"selected_items":
		[
		],
		"width": 0.0
	},
	"console":
	{
		"height": 0.0
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"file_history":
	[
		"/Users/senpusha/Love2D/GamJam/GamJam/src/conf.lua",
		"/Users/senpusha/Downloads/Level 1 Kanji Revision.apkg",
		"/Users/senpusha/Library/Application Support/Sublime Text 2/Packages/User/Preferences.sublime-settings",
		"/Users/senpusha/outerunner/project/src/player.lua",
		"/Users/senpusha/outerunner/project/src/skeleton.lua",
		"/Users/senpusha/outerunner/project/src/main.lua",
		"/Users/senpusha/writing/cyber/summary of ideas from:",
		"/Volumes/dev/esps/Esps.Website/app/views/Index.html",
		"/Users/senpusha/Downloads/Fun_Sketchin_Brush.tpl",
		"/Users/senpusha/cyberpunkjam/lib/lurker.lua",
		"/Users/senpusha/cyberpunkjam/states/titleoptions.lua",
		"/Users/senpusha/cyberpunkjam/states/title.lua",
		"/Users/senpusha/cyberpunkjam/main.lua",
		"/Users/senpusha/cyberpunkjam/assets/images/char.lua",
		"/Users/senpusha/cyberpunkjam/states/gameplay.lua",
		"/Users/senpusha/cyberpunkjam/conf.lua",
		"/Users/senpusha/cyberpunkjam/assets/images/bg_spritebatch.lua",
		"/Users/senpusha/cyberpunkjam/build/i love u",
		"/Users/senpusha/zoosmellpooplord/conf.lua",
		"/Users/senpusha/zoosmellpooplord/states/title.lua",
		"/Users/senpusha/Library/Application Support/Sublime Text 2/Packages/User/Love.sublime-build",
		"/Users/senpusha/zoosmellpooplord/main.lua",
		"/Users/senpusha/zoosmellpooplord/states/gameplay.lua",
		"/Users/senpusha/zoosmellpooplord/lib/reader.lua",
		"/Users/senpusha/zoosmellpooplord/lib/HUMP/timer.lua",
		"/Users/senpusha/zoosmellpooplord/states/scenes/ch1/hello.lua",
		"/Users/senpusha/zoosmellpooplord/lib/richtext.lua",
		"/Users/senpusha/zoosmellpooplord/states/titleoptions.lua",
		"/Users/senpusha/zoosmellpooplord/states/exit.lua",
		"/Users/senpusha/zdshm/src/libs/HUMP/gamestate.lua",
		"/Users/senpusha/zdshm/src/main.lua",
		"/Users/senpusha/zdshm/README.md",
		"/Users/senpusha/zdshm/src/demo.lua",
		"/Users/senpusha/zdshm/src/conf.lua",
		"/Users/senpusha/zdshm/src/bead.lua",
		"/Users/senpusha/zdshm/src/player.lua",
		"/Users/senpusha/zdshm/src/skeleton.lua",
		"/Users/senpusha/zdshm/src/libs/Simple-Tiled-Implementation/sti.lua",
		"/Users/senpusha/zdshm/src/img/demo_tile_1.png",
		"/Users/senpusha/Library/Application Support/Sublime Text 2/Packages/User/Lua.sublime-settings",
		"/Users/senpusha/Downloads/UnTattieboglev2.sh",
		"/Users/senpusha/Downloads/ControllerListv8-16.plist",
		"/Users/senpusha/zdshm.sublime-project"
	],
	"find":
	{
		"height": 35.0
	},
	"find_in_files":
	{
		"height": 0.0,
		"where_history":
		[
			"",
			"newPitch",
			"/Users/senpusha/zdshm/src"
		]
	},
	"find_state":
	{
		"case_sensitive": false,
		"find_history":
		[
			"backgrounds",
			"scale",
			"title",
			"music",
			"setmask(1",
			"setMask",
			"setcategory",
			"jumped",
			"extra",
			"extrawall",
			"keypressed",
			"destroy",
			"extrawall",
			"newPitch",
			"lurker",
			"setcolor",
			"scanlines_o",
			"win",
			"combo",
			"dt",
			"combo",
			"action",
			"extra",
			"extrwa",
			"extrawall",
			"leave",
			"overlay",
			"image",
			"overlay",
			"newPicth",
			"newPitch",
			"tween",
			"update",
			"waiting",
			"tween",
			"arc_overlay",
			"player",
			"player.frame",
			"waiting",
			"print",
			"tween",
			"stomped",
			"combo",
			"SCORE",
			"print",
			"waiting",
			"frame_tween",
			"player.frame",
			"char_frame",
			"08",
			"print(",
			"player",
			"destroy",
			"jumped",
			"char_frame",
			"player_batch",
			"14",
			"player.width",
			"setpointsize",
			"[1]",
			".lane",
			".land",
			"0.5",
			"intro",
			"wall_frame",
			"cam.z",
			"drawHUD",
			"drawhud",
			"sore",
			"score = 0",
			"score",
			"sine",
			"in-out",
			"scpre = 0",
			"score",
			"bmp",
			".bmp",
			"*-1",
			"print",
			"100",
			"combo",
			"0.5",
			"img_bg",
			"mass",
			"Body",
			"*3",
			"bg",
			"print",
			"reset",
			"default",
			"setLineHeight",
			"wrap",
			"new",
			"main",
			"to",
			"print",
			"switch",
			"madcatz",
			"fighstick",
			"neo"
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": false,
		"replace_history":
		[
			"play",
			"newPitch",
			""
		],
		"reverse": false,
		"show_context": true,
		"use_buffer2": true,
		"whole_word": false,
		"wrap": true
	},
	"groups":
	[
		{
			"selected": 1,
			"sheets":
			[
				{
					"buffer": 0,
					"file": "states/title.lua",
					"settings":
					{
						"buffer_size": 1862,
						"regions":
						{
						},
						"selection":
						[
							[
								1236,
								1236
							]
						],
						"settings":
						{
							"syntax": "Packages/Lua/Lua.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 1,
					"file": "states/level.lua",
					"settings":
					{
						"buffer_size": 5809,
						"regions":
						{
						},
						"selection":
						[
							[
								214,
								214
							]
						],
						"settings":
						{
							"syntax": "Packages/Lua/Lua.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 2,
					"file": "states/play.lua",
					"settings":
					{
						"buffer_size": 1641,
						"regions":
						{
						},
						"selection":
						[
							[
								841,
								841
							]
						],
						"settings":
						{
							"syntax": "Packages/Lua/Lua.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 107.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 3,
					"file": "conf.lua",
					"settings":
					{
						"buffer_size": 1785,
						"regions":
						{
						},
						"selection":
						[
							[
								1136,
								1136
							]
						],
						"settings":
						{
							"syntax": "Packages/Lua/Lua.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 0.0
	},
	"input":
	{
		"height": 31.0
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				1,
				1
			]
		],
		"cols":
		[
			0.0,
			1.0
		],
		"rows":
		[
			0.0,
			1.0
		]
	},
	"menu_visible": true,
	"output.exec":
	{
		"height": 100.0
	},
	"replace":
	{
		"height": 64.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 0.0,
		"selected_items":
		[
		],
		"width": 0.0
	},
	"show_minimap": true,
	"show_open_files": false,
	"show_tabs": true,
	"side_bar_visible": true,
	"side_bar_width": 150.0,
	"status_bar_visible": true
}
